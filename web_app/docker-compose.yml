version: '3.8'

services:
  # Redis (for Celery broker and caching)
  redis:
    image: redis:7-alpine
    container_name: kindle_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # PostgreSQL Database (optional, can use SQLite for development)
  db:
    image: postgres:15-alpine
    container_name: kindle_db
    environment:
      POSTGRES_DB: kindle_web
      POSTGRES_USER: kindle_user
      POSTGRES_PASSWORD: kindle_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kindle_user -d kindle_web"]
      interval: 30s
      timeout: 10s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: kindle_backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    environment:
      - DEBUG=true
      - DATABASE_URL=postgresql://kindle_user:kindle_password@db:5432/kindle_web
      # For SQLite: DATABASE_URL=sqlite:///./kindle_web.db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4o-mini}
    depends_on:
      - redis
      - db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: docker/celery.Dockerfile
    container_name: kindle_celery_worker
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    environment:
      - DATABASE_URL=postgresql://kindle_user:kindle_password@db:5432/kindle_web
      # For SQLite: DATABASE_URL=sqlite:///./kindle_web.db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4o-mini}
    depends_on:
      - redis
      - db
    restart: unless-stopped

  # Celery Flower (monitoring)
  celery_flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: kindle_celery_flower
    command: celery -A app.tasks.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
    restart: unless-stopped

  # Vue.js Frontend (will be added later)
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: kindle_frontend
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #   environment:
  #     - VITE_API_BASE_URL=http://localhost:8000/api/v1
  #   depends_on:
  #     - backend

volumes:
  redis_data:
  postgres_data:
  backend_uploads:
  backend_logs: